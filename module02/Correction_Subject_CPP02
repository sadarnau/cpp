CPP Module 02
Accessors The Fixed class (or whatever its name) must provide accessors to
the raw value:
  - int getRawBits( void ) const;
  - void setRawBits(
int const raw );
Are these member functions present and functional?

Canonical A canonical class must provide at least:
  - A default constructor
  - A destructor
  - A copy constructor
  - An assignation operator
Are these elements present and functional?

Floating point constructor Is it possible to construct an instance from a floating point value?

<< operator Is there a << operator overload and is it functional?
Fixed point value to integer value A member function "int toInt( void ) const;" that converts the
fixed point value to an integer value must be present. Is it functional?

Fixed point value to floating point value A member function \"float toFloat( void ) const;\" that converts
the fixed point value to a float value must be present. Is it functional?

Integer constructor Is it possible to construct an instance from an integer value?
Division The class must provide a division operator. Is it present and functional?
Addition and substraction The class must provide addition and substraction operators. Are they present and functional?
Pre/post increment and pre/post decrement operators The class must provide the pre-increment, post-increment, pre-decrement
and post-decrement operators, that will increment or decrement the fixed point
value from the smallest representable\\x0F such as 1 + \\x0F > 1. Are they present
and are they functional?

Multiplication The class must provide a multiplication operator. Is it present and
functional?

Min and max The class must provide 4 non member functions: min, max and their const overloads. Are they present and are they functional?
Comparison operators The class must provide 6 comparison operators: \>, <, >=, <=, == and !=.
Are they present and functional?

Small fixed point expressions interpreter Test the interpreter with more and more complex expressions. Start
with values, then move to simple addtion, multiplications, then test complex
expressions with parenthesis.

