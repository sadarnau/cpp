CPP Module 03
Class and attributes There is a FragTrap class present.
It has all the required attributes.
Its attributes are initialized to the required values.

Special attack There is a vaulthunter_dot_exe function that works as specified by
the subject.

It's called style, look it up. How elegant do you think the method used to determine the attack
in the vaulthunder_dot_exe function is?

I AM FUNNYBOT. AWKWAAAARD! AWKWAAAAARD! How funny are the output messages?
Member functions The following member functions are present and work as specified:

    - rangedAttack
    - meleeAttack
    - takeDamage
    - beRepaired
  Also, the constraints about the HP limits and the armor reduction must be
  taken into account.

Class and attributes There is a ScavTrap class present.
It has all the required attributes.
Its attributes are initialized to the required values.

Member functions The following member functions are present and work as specified:

    - rangedAttack
    - meleeAttack
    - takeDamage
    - beRepaired
  Also, the constraints about the HP limits and the armor reduction must be
  taken into account.
  The outputs of the constructor, destructor, rangedAttack and
meleeAttack must be different from the ones in the previous exercise.

Wow, what a t-t-terrific audience! How funny are the output messages ?
Special features There is a challengeNewcomer function that works as specified by
the subject.

Parent class There is a ClapTrap class present, and both ScavTrap and FragTrap
inherit publicly from it.
All the functions and attributes that were shared
between both ScavTrap
  and FragTrap are now in ClapTrap, namely:
    - Hit points
    - Max hit points
    - Energy points
    - Max energy points

    - Level
    - Name
    - Melee damage
    - Ranged damage
    - Armor
    - damage reduction
    - takeDamage
    - beRepaired

  rangedAttack and meleeAttack can either be in the ClapTrap class and use
  an attribute to have a different output depending on the child class, or
  remain in the child classes.
  Whatever.
  The attributes specific to each class (vaulthunter_dot_exe,
  challengeNewcomer, and whatever the student created to help with these)
  must of course remain where they are.

Construction and destruction There must be a constructor and a destructor for the ClapTrap with
its own specific messages, and it must be implemented so that it is called in the correct order
  when used, namely, if you create a FragTrap it must first display the ClapTrap's
  message then the FragTrap's, and if you delete it, it must display the FragTrap's
  message first, then the ClapTrap's

But once, he break out of his cage, and he "get this"! Very nice. The ninjaShoebox function has to do something funny! Even better
if it's different for each ClapTrap type

Special attack There is a ninjaShoebox function that is present multiple times in
the NinjaTrap, one for each ClapTrap concrete type that can be taken as parameter
  (So, ClapTrap, ScavTrap, FragTrap and NinjaTrap).

Subclass There is a NinjaTrap class present.
It inherits from ClapTrap,
and sets the attributes to their appropriate values.

Ultimate shoebox There is a SuperTrap class present.
It inherits from both the
FragTrap and the NinjaTrap.
  It sets the attributes to the appropriate values.
  It uses virtual inheritance to avoid the pitfalls of diamond inheritance.

Choose wisely... The SuperTrap uses the rangedAttack of the FragTrap and the meleeAttack
of
the NinjaTrap.
  It has the special attacks of both its parents.

