CPP Module 08
ex00 There is a templated function easyFind(T, int) that does what the
subject requires.
It HAS to use STL algorithms.
If it does not (Manual search using iterators for example), count it as wrong.

ex01 There is a class that respects the constraints of the subject.
Its member functions use STL algorithms to find their result, as much as possible.

Better addNumber There's a way to add numbers that's more practical than calling addNumber
repeatedly.

ex02 There is a MutantStack class that inherits from std::stack (Or is
composed of one, dealer's choice), and offers all of its member functions.
It has an iterator, and it is possible to do at least the operations in the subject's
example with it.

Better tests There is a test main() function that has more tests than the one
in the subject.

ex03 There is a program that can interpret a Brainfuck-like language.
It functions correctly (The student has to provide test files to prove it)
It works in the way specified by the subject, that is, it has a set of Instruction
classes that inherit from a common interface or class, it reads from the file,
creating one such Instruction object and storing it in an appropriate container,
then once the file is fully read, it executes the Instructions.
It has to use STL containers and algorithms.
If the way it works deviates too much
from what the subject requires, count it as wrong.

ex04 The program works as the subject requires:
- First, it converts the
expression to a set of Token-derived objects
-It converts the expression to
postfix (aka Reverse Polish) notation
- It evaluates the expression while outputting
every single step, as in the subject's example.
Errors are handled appropriately.
STL algorithms are used in a reasonable enough amount.

